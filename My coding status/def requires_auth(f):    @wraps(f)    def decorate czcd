def requires_auth(f):    @wraps(f)    def decorated(*args, **kwargs):        auth = request.headers.get('Authorization', None)        if not auth:            return handle_error({'code': 'authorization_header_missing',                                'description':                                    'Authorization header is expected'}, 401)        parts = auth.split()        if parts[0].lower() != 'bearer':            return handle_error({'code': 'invalid_header',                                'description':                                    'Authorization header must start with'                                    'Bearer'}, 401)        elif len(parts) == 1:            return handle_error({'code': 'invalid_header',                                'description': 'Token not found'}, 401)        elif len(parts) > 2:            return handle_error({'code': 'invalid_header',                                'description': 'Authorization header must be'                                 'Bearer + \s + token'}, 401)        token = str(parts[1])        key = jwk.construct(hmac_key)        message, encoded_sig = token.rsplit('.', 1)        decoded_sig = base64url_decode(encoded_sig)        try:            if key.verify(message, decoded_sig):                payload = jwt.decode(                            token,                            public_key,                            audience='0SBT1nTPPyAl04Ou8IFNDpNaKvCjCjF7'                            )                _app_ctx_stack.top.current_user = payload            else:                return raise_error(401, "Unauthorized")        except jwt.ExpiredSignature:            return handle_error({'code': 401, 'description': 'token is expired'}, 401)        except jwt.InvalidAudienceError:            return handle_error({'code': 401, 'description': 'incorrect audience'}, 401)        except jwt.DecodeError:            return handle_error({'code': 401, 'description': 'token signature is invalid'}, 401)        except Exception:            return handle_error({'code': 401, 'description':'Unable to parse authentication token.'}, 400)        return f(*args, **kwargs)    return decorated